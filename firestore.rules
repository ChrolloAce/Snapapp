rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isPostAuthor(postId) {
      return request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.authorId;
    }

    function isValidComment() {
      let comment = request.resource.data.comments[-1];
      return comment.content.size() > 0 && 
             comment.content.size() <= 1000 &&
             comment.authorId == request.auth.uid;
    }

    function isValidLike() {
      // Allow any like/unlike operation by authenticated users
      return true;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
      
      // Allow all authenticated users to create and update their profiles
      match /profile/{document=**} {
        allow read: if true;
        allow write: if request.auth.uid == userId;
      }
    }
    
    // Posts collection rules
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isPostAuthor(postId);
      
      // Comments subcollection - alternative approach
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.authorId;
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.authorId || 
          isPostAuthor(postId)
        );
      }
      
      // Likes subcollection rules
      match /likes/{userId} {
        allow read: if true;
        allow write, delete: if isAuthenticated();
      }
    }
    
    // Chat collection rules
    match /chat/{messageId} {
      allow read: if true;
      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.content.size() <= 1000;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;
    }
  }
}